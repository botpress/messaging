import { Flow, FormDataField, NodeTransition } from './interfaces'

export interface ModuleDefinition {
  /** This name should be in lowercase and without special characters (only - and _) */
  name: string
  fullName?: string
  plugins?: ModulePluginEntry[]
  /** Additional options that can be applied to the module's view */
  moduleView?: ModuleViewOptions
  /** If set to true, no menu item will be displayed */
  noInterface?: boolean
  /**
   * An icon to display next to the name, if none is specified, it will receive a default one
   * There is a separate icon for the admin and the studio, if you set menuIcon to 'icon.svg',
   * please provide an icon named 'studio_icon.svg' and 'admin_icon.svg'
   */
  menuIcon?: string
  /**
   * The name displayed on the menu
   * @deprecated Set the property "fullName" in the translations file for the desired language
   */
  menuText?: string
  /** Optionally specify a link to your page or github repo */
  homepage?: string
  /** Whether or not the module is likely to change */
  experimental?: boolean
  /** Workspace Apps are accessible on the admin panel */
  workspaceApp?: {
    /** Adds a link on the Bots page to access this app for a specific bot */
    bots?: boolean
    /** Adds an icon on the menu to access this app without a bot ID */
    global?: boolean
  }
}

/**
 * Skills are loaded automatically when the bot is started. They must be in the module's definition to be loaded.
 * Each skills must have a flow generator and a view with the same name (skillId)
 */
export interface Skill {
  /** An identifier for the skill. Use only a-z_- characters. */
  id: string
  /** The name that will be displayed in the toolbar for the skill */
  name: string
  /** An icon to identify the skill */
  icon?: string | any
  /** Name of the parent module. This field is filled automatically when they are loaded */
  readonly moduleName?: string
  /**
   * When adding a new skill on the Flow Editor, the flow is constructed dynamically by this method
   *
   * @param skillData Provided by the skill view, those are fields edited by the user on the Flow Editor
   * @param metadata Some metadata automatically provided, like the bot id
   * @return The method should return
   */
  flowGenerator: (skillData: any, metadata: FlowGeneratorMetadata) => Promise<FlowGenerationResult>
}

export interface FlowGeneratorMetadata {
  botId: string
}

export interface ModulePluginEntry {
  entry: 'WebBotpressUIInjection'
  position: 'overlay'
}

export interface ModuleViewOptions {
  stretched: boolean
}

/**
 * This interface is used to encapsulate the logic around the creation of a new skill. A skill
 * is a subflow which can have multiple nodes and custom logic, while being hidden under a single node in the main flow.
 * The node transitions specified here are applied on the node in the main flow. Once the user enters the node,
 * the flow takes over
 */
export interface FlowGenerationResult {
  /**
   * A partial flow originating from a skill flow generator. Missing pieces will be automatically added
   * once the flow is sent to Botpress, the final product will be a Flow.
   */
  flow: SkillFlow
  /** An array of possible transitions for the parent node */
  transitions: NodeTransition[]
}

/**
 * The partial flow is only used to make some nodes optional. Those left empty will be automatically
 * generated by the skill service.
 */
export type SkillFlow = Partial<Flow> & Pick<Required<Flow>, 'nodes'>

export interface FormOption {
  value: any
  label: string
  related?: FormField
}

export interface FormContextMenu {
  type: string
  label: string
}

// TODO use namespace to group form related interfaces
export interface FormDynamicOptions {
  /** An enpoint to call to get the options */
  endpoint: string
  /** Used with _.get() on the data returned by api to get to the list of items */
  path?: string
  /** Field from DB to map as the value of the options */
  valueField: string
  /** Field from DB to map as the label of the options */
  labelField: string
}

export type FormFieldType =
  | 'checkbox'
  | 'group'
  | 'number'
  | 'overridable'
  | 'select'
  | 'multi-select'
  | 'text'
  | 'text_array'
  | 'textarea'
  | 'upload'
  | 'url'
  | 'hidden'
  | 'tag-input'
  | 'variable'

export interface FormField {
  type: FormFieldType
  key: string
  label?: string
  overrideKey?: string
  placeholder?: string | string[]
  emptyPlaceholder?: string
  options?: FormOption[]
  defaultValue?: FormDataField
  required?: boolean
  variableTypes?: string[]
  customPlaceholder?: boolean
  max?: number
  min?: number
  maxLength?: number
  valueManipulation?: {
    regex: string
    modifier: string
    replaceChar: string
  }
  translated?: boolean
  dynamicOptions?: FormDynamicOptions
  fields?: FormField[]
  moreInfo?: FormMoreInfo
  /** When specified, indicate if array elements match the provided pattern */
  validation?: {
    regex?: RegExp
    list?: any[]
    validator?: (items: any[], newItem: any) => boolean
  }
  group?: {
    /** You have to specify the add button label */
    addLabel?: string
    addLabelTooltip?: string
    /** You can specify a minimum so the delete button won't show if there isn't more than the minimum */
    minimum?: number
    /** You can specify that there's one item of the group by default even if no minimum */
    defaultItem?: boolean
    /** You can add a contextual menu to add extra options */
    contextMenu?: FormContextMenu[]
  }
}

export interface FormMoreInfo {
  label: string
  url?: string
}
